<html>

  <head>

    <meta charset="utf-8" />
    <title>Python et l'Algo</title>
    <link rel="stylesheet" href="css6.css" />
    <style>
div.sticky {
  position: -webkit-sticky;
  position: sticky;
  top: 0;
  padding: 0px;
  font-size: 0px;
  float: right;
}

</style>
  </head>

    <h1>Python et l'Algo</h1>

  <body>

<div class="sticky"><iframe src="http://brython.info/console.html" width="500" height="300"></iframe></div>
    <h2>I ) Types construits indexables</h2>
    <p>Les types suivants ordonnent les données en repérant la position de chaque donnée par
son rang, appelé indice<br> (ou index). On dit qu'ils sont indexables.</p>

    <h3> 1) Chaines de caractères : type str</h3>
    <p>C'est une séquence de caractères (lettre) repérés par un index (ou indice),
     c'est à dire leur position dans la chaine,<br>
      en commençant par 0. On l'écrit entre simples ' ' ou doubles " ".</p>
<p>>> mot = "Python"<br>
>>> mot = 'Python'<br>
>>> mot[0] &nbsp;&nbsp;&nbsp;&nbsp; #la première lettre de mot<br>
'P'<br>
>>> mot[4] &nbsp;&nbsp;&nbsp;&nbsp; #la cinquième lettre de mot<br>
'o'<br>
>>> mot[1] = 'i' &nbsp;&nbsp;&nbsp;&nbsp; #on veut remplacer la deuxième lettre par 'i'<br>
Traceback (most recent call last):<br>
 File "interactive input", line 1, in module<br>
TypeError: 'str' object does not support item assignment<br><br>

Une fois créée, la chaine "Python", ou 'Python', n'est pas modifiable. On parle de type
immuable ou immutable.</p>

    <h3>2) p-uplets (ou tuples) : type tuple</h3>
    <p>Un tuple consiste en une séquence de valeurs (ou données), pas obligatoirement du
même type, séparées par des virgules. Etant une séquence, un tuple est également
indexable.<br><br>

>>> t = 12345, 54321, 'hello!'<br>
>>> t[0]<br>
12345<br>
>>> t<br>
(12345, 54321, 'hello!')<br><br>

On peut imbriquer des tuples :<br><br>

>>> u = t, (1, 2, 3, 4, 5)<br>
>>> u<br>
((12345, 54321, 'hello!'), (1, 2, 3, 4, 5))<br><br>

Un tuple vide s'écrit ().<br><br>

>>> monTuple = (1,2,3,4,5)<br>
>>> monTuple[3]=2<br>
Traceback (most recent call last):<br>
 File "interactive input", line 1, in module<br>
TypeError: 'tuple' object does not support item assignment<br><br>

Comme les chaines de caractère, les tuples sont immutables, c'est à dire qu'une fois créé,
il n'est pas possible de modifier les données présentes dans le tuple.</p>

<h3> 3) Listes : type list</h3>
<p>Il s'agit d'une suite, placée entre crochets [ ], de valeurs (ou données, on parle parfois
d'éléments), séparés par des virgules. Les éléments d'une liste ne sont pas
obligatoirement tous du même type, bien qu'à l'usage ce soit souvent le cas. Une liste est
également indexable.<br><br>

>>> squares = [1, 4, 9, 16, 25]<br>
>>> squares<br>
[1, 4, 9, 16, 25]<br>
>>> squares[0]<br>
1<br>
>>> squares[2] = 36 &nbsp;&nbsp;&nbsp;&nbsp; #remplace le 3eme élément par 36<br>
>>>squares<br>
[1, 4, 36, 16, 25]<br><br>

La particularité des listes est de pouvoir changer le nombre et les valeurs des éléments
qu'elles contiennent. On dit que les listes sont mutables/muables, à la différence des str et
des tuples.</p>

    <h3>4) Opérations communes à str, tuple, list</h3>
<p><u>Indices négatifs :</u><br><br>

Un indice négatif signifie que l'on partira de la fin :<br><br>

>>>"Python"[-1]<br>
'n'<br>
>>>[1, 4, 9, 16, 25][-2]<br>
16<br>
>>>(1, 5, -2, 3)[-3]<br>
5<br><br>

Fonction len() : renvoie la longeur (nombre d'éléments) de l'argument. Vient de length
(longueur en anglais)<br><br>

>>> len([1, 4, 9, 16, 25])<br>
5<br>
>>> len("Python")<br>
6<br>
>>> len((1,5,-2,3))<br>
4<br><br>

<u>Opération de concatenation "+" :</u><br><br>

>>> [1,4,9]+[16,25]<br>
[1, 4, 9, 16, 25]<br>
>>> "Pyt"+"hon"<br>
'Python'<br>
>>> (1,5)+(-2,3)<br>
(1, 5, -2, 3)<br><br>

Attention, le + ne désigne pas une addition mathématique, mais prend ici un autre sens.
On parle de surcharge de l'opération addition.<br><br>

 <u>Opération de duplication "*" :</u><br><br>

>>> [1,2]*4<br>
[1, 2, 1, 2, 1, 2, 1, 2]<br>
>>> "Pyhton"*3<br>
'PyhtonPyhtonPyhton'<br>
>>> (3,-1)*5<br>
(3, -1, 3, -1, 3, -1, 3, -1, 3, -1)<br><br>

Attention, le * ne désigne pas une multiplication mathématique, mais prend ici un autre
sens. On a surchargé l'opération multiplication.</p>

    <h2> II) Slices et str, tuples, list :</h2>
    <p>str, tuple et list sont subscriptables. Un type subscriptable est un type dont on peut
récupérer une partie en utilisant [ ] :<br>
<ul><li>soit un élément avec un indice (mot[0] par exemple) : c'est le type indexable</li>
<li>soit une part (slice en anglais) : c'est le type sliceable</li></ul></p>
<!-- la balise ul ne peut contenir que l'élément <li>, ce qui permet de faire
 des listes, ici la liste commence par des points, avec ol, la liste serait
 numérotée -->

<p>Un slice doit respecter la syntaxe [start:stop:step].<br><br>

Exemples :<br><br>

>>> "Python"[1:4] &nbsp;&nbsp;&nbsp;&nbsp; #En l'absence de :step, la valeur 1 est prise par défaut<br>
'yth'<br><br>

Remarque : l'indice de fin n'est pas sélectionné. Ici on s'arrête à la lettre h, soit l'indice 3.<br><br>

>>> [1, 4, 9, 16, 25, 36, 49, 64][ : 4]<br>
[1, 4, 9, 16]<br><br>

Remarque : En l'absence de start, le premier indice est choisi par défaut.<br><br>

>>> [1, 4, 9, 16, 25, 36, 49, 64][3 :]<br>
[16, 25, 36, 49, 64]<br><br>

Remarque : En l'absence de stop, le dernier indice +1 est choisi par défaut. Le slice ira
jusqu'à la dernière valeur.<br><br>

>>>"Python"[1:6:2] &nbsp;&nbsp;&nbsp;&nbsp; #Un pas de 2 a été choisi<br>
'yhn'<br><br>

>>> [1, 4, 9, 16, 25, 36, 49, 64][1: :2]<br>
[4, 16, 36, 64]<br><br>

>>> [1, 4, 9, 16, 25, 36, 49, 64][ : : -1]<br>
[64, 49, 36, 25, 16, 9, 4, 1]<br><br>

Un pas négatif permet de parcourir la liste dans le sens inverse.<br><br>

Astuce : [ : : -1] permet donc de renvoyer le type construit dans l'ordre inverse.</p>

    <h2>III) Opérations spécifiques aux listes</h2>
    <p>Voici une liste non exhaustive de quelques opérations (on parle de méthodes) que Python
autorise sur les listes :<br><br>

<u>Méthode append (x) :</u> ajoute élément l'élément à la fin de la liste<br><br>

>>> squares = [1, 4, 9, 16, 25 ]<br>
>>> squares.append(36) &nbsp;&nbsp;&nbsp;&nbsp; # rajoute 36 à la fin<br>
>>> squares<br>
[1, 4, 9, 16, 25, 36]<br><br>

<u>Méthode insert(i,x) :</u> insère l'élément x au rang i dans la liste<br><br>

>>> squares = [1, 4, 9, 25, 36 ]<br>
>>> squares.insert(3,16)<br>
>>> squares<br>
[1, 4, 9, 16, 25, 36]<br><br>

<u>Méthode pop(i) :</u> retire et renvoi l'élément situé au rang i de la liste. Si i n'est pas spécifié
( pop() ), c'est le dernier élément de la liste qui est choisi par défaut.<br><br>

>>> squares = [1, 4, 9, 16, 25, 36]<br>
>>> squares.pop(2)<br>
9<br>
>>> squares<br>
[1, 4, 16, 25, 36]<br>
>>> squares.pop()<br>
36<br>
>>> squares<br>
[1, 4, 16, 25]<br><br>

<u>Compréhensions de listes :</u><br><br>

Il est possible de fabriquer une liste en donnant la "recette de fabrication".<br><br>

>>> [ i**2 for i in range(1,6)]<br>
[1, 4, 9, 16, 25]</p>

    <h2>IV) Dictionnaires</h2>
    <p>Un dictionnaire est une structure de données particulière. Plutôt que d'utiliser un indice
pour référencer les valeurs<br> qu'il contient, il utilisera une clé unique. Cette clé peut être un
nombre, une chaine de caractère ou<br> n'importe quel autre type immutable.<br><br>

Un dictionnaire vide s'écrit { }.<br><br>

Exemple :<br><br>

>>> tel = {'jack': 4098, 'sape': 4139} &nbsp;&nbsp;&nbsp;&nbsp; #Création du dictionnaire avec deux clé 'jack' et 'sape'<br>
>>> tel['guido'] = 4127 &nbsp;&nbsp;&nbsp;&nbsp; #Insertion d'une nouvelle clé 'guido' avec sa valeur 4127<br>
>>> tel<br>
{'jack': 4098, 'sape': 4139, 'guido': 4127}<br>
>>> tel['jack'] &nbsp;&nbsp;&nbsp;&nbsp; #Renvoyer la valeur associée à la clé 'jack'<br>
4098
>>> del tel['sape'] &nbsp;&nbsp;&nbsp;&nbsp; #Supprimer le couple clé:valeur associé à la clé 'sape'<br>
>>> tel<br>
{'guido': 4127, 'jack': 4098}<br>
>>> tel['irv'] = 4127 &nbsp;&nbsp;&nbsp;&nbsp; #Insertion d'une nouvelle clé 'irv' avec sa valeur 4127<br>
>>> tel<br>
{'jack': 4098, 'guido': 4127, 'irv': 4127}<br><br>

<u>Méthodes items, keys et values :</u><br><br>

Renvoient respectivement les couples (clés, valeurs), les clés et les valeurs.<br><br>

>>> tel.items()<br>
dict_items([('guido', 4127), ('jack', 4098), ('irv', 4127)])<br>
>>> tel.keys()<br>
dict_keys(['guido', 'jack', 'irv'])<br>
>>> tel.values()<br>
dict_values([4127, 4098, 4127])<br><br>

Pour les utiliser en tant que liste, il faut utiliser list ( ) comme suit :<br>
list (tel.items()) , list(tel.keys()) et list(tel.values()).
    </p>

<h4 style="color: black"><u>Liens vers d'autres pages de mon site :</u></h4>

<ul>

<li><a href="Html.htm"> Le language Html</a>
<li><a href="bouclesPython.htm"> Le language Python</a>
<li><a href="CSS.htm">Le language CSS</li>
<li><a href="videos.htm">Quelques vidéos explicatives</li>
<li><a href="Index.htm"> Retour à l'index</a>

</ul>

  </body>
</html>
